{"version":3,"file":"static/js/405.7133514b.chunk.js","mappings":"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","sources":["modules/Search/SearchService.tsx","view/Search/SRPCard.tsx","view/Search/SearchContext.tsx","view/Search/SRP/SRPTable.tsx","view/Search/SRP/SearchResults.tsx","view/Search/Search.tsx"],"sourcesContent":["import authAxios from \"src/modules/shared/axios/authAxios\";\r\nimport AuthCurrentTenant from \"src/modules/auth/authCurrentTenant\";\r\n\r\nexport default class SearchService {\r\n  // GET CATEGORIES LIST FOR PUBLICATIONS\r\n  static async getCategoriesList() {\r\n    const tenantId = AuthCurrentTenant.get();\r\n    const response = await authAxios.get(\r\n      `/tenant/${tenantId}/category-publication`\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  static async getSearchResultsForPublicationsBasedOnSearchString(\r\n    SEARCH_STRING,\r\n    OFFSET\r\n  ) {\r\n    const tenantId = AuthCurrentTenant.get();\r\n    const response = await authAxios.get(\r\n      `/tenant/${tenantId}/search?filter=${SEARCH_STRING}&limit=10&offset=${OFFSET}&validated={true}`\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  // SAERCH BASED ON CATEGORIES (REVERSE LOGIC)\r\n  static async searchUsingMainCatefories(SEARCH_STRING, categoryName, OFFSET) {\r\n    const tenantId = AuthCurrentTenant.get();\r\n    const response = await authAxios.get(\r\n      `/tenant/${tenantId}/category-publication?filter[titleFR]=${categoryName}`\r\n    );\r\n    const publicationsOfSelectedCategory = response.data.rows[0]?.publications;\r\n    const finalResponseOBject = {\r\n      rows: publicationsOfSelectedCategory ?? [],\r\n      count: publicationsOfSelectedCategory?.length ?? 0,\r\n    };\r\n    return finalResponseOBject;\r\n  }\r\n\r\n  // ARCHIVE SEARCH\r\n  static async getSearchResultsForArchiveBasedOnSearchString(\r\n    SEARCH_STRING,\r\n    FILTER_STRING,\r\n    OFFSET\r\n  ) {\r\n    const tenantId = AuthCurrentTenant.get();\r\n    const response = await authAxios.get(\r\n      `/tenant/${tenantId}/publication?filter[descriptionFR]=${SEARCH_STRING}&limit=5&offset=${OFFSET}&filter[statut]=archive${FILTER_STRING}`\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  static async getArchivePublications(SEARCH_STRING, FILTER, OFFSET) {\r\n    const tenantId = AuthCurrentTenant.get();\r\n    const response = await authAxios.get(\r\n      `/tenant/${tenantId}/publication/search?filter=${SEARCH_STRING}&limit=10&offset=${OFFSET}&advanced[statut]=${FILTER.statut}&advanced[thematique]=${FILTER.thematique}&advanced[category]=${FILTER.category}`\r\n    );\r\n    return response.data;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport parse from \"html-react-parser\";\r\nimport moment from \"moment\";\r\nimport { calendar, noData } from \"src/assets/images\";\r\nexport default function SRPCard({\r\n  _id,\r\n  date,\r\n  content,\r\n  thumbnail,\r\n  title,\r\n  entite,\r\n  type,\r\n}) {\r\n  const formattedDate = moment(date).format(\"l\");\r\n  return (\r\n    <CardLayout>\r\n      <Link to={\"/\" + entite + \"/\" + _id}>\r\n        <div className=\"search__description\">\r\n          <div>\r\n            <div className=\"evenement__left\">\r\n              {thumbnail ? (\r\n                <img\r\n                  className=\"lazyload\"\r\n                  style={{ width: 100, height: 100 }}\r\n                  src={thumbnail}\r\n                  alt=\"\"\r\n                />\r\n              ) : (\r\n                <img\r\n                  className=\"lazyload\"\r\n                  style={{ width: 100, height: 100 }}\r\n                  src={noData}\r\n                  alt=\"\"\r\n                />\r\n              )}\r\n            </div>\r\n            <div className=\"evenement__right\">\r\n              <div className=\"date\">\r\n                <div>\r\n                  <img className=\"lazyload\" src={calendar} alt=\"\" srcSet=\"\" />\r\n                  {formattedDate}\r\n                </div>\r\n                {type ? (\r\n                  <div className=\"cardHeader\">\r\n                    <span className=\"categoryBadge\">{type}</span>\r\n                  </div>\r\n                ) : null}\r\n              </div>\r\n              {title ? (\r\n                <div className=\"title\">\r\n                  {title.length > 100\r\n                    ? parse(title.substring(0, 100) + \"...\")\r\n                    : parse(title)}\r\n                </div>\r\n              ) : null}\r\n              {content ? (\r\n                <div className=\"right__footer\">\r\n                  {content.length > 100\r\n                    ? parse(content.substring(0, 100) + \"...\")\r\n                    : parse(content)}\r\n                </div>\r\n              ) : null}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Link>\r\n      <hr></hr>\r\n    </CardLayout>\r\n  );\r\n}\r\n\r\nconst CardLayout = styled.div`\r\n  /* LEFT SECTION */\r\n  hr {\r\n    height: 1px;\r\n    background-color: #2b2840;\r\n    border: none;\r\n  }\r\n  .cardContent {\r\n    flex-grow: 1;\r\n    height: 100%;\r\n    padding-left: 1rem;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n\r\n    .cardHeader {\r\n      width: 100%;\r\n      display: flex;\r\n      justify-content: space-between;\r\n      font-size: 12px;\r\n      font-family: \"Proxima Nova\";\r\n\r\n      .categoryBadge {\r\n        background: #f8d7da;\r\n        border-radius: 3px;\r\n        color: var(--dark--red);\r\n        padding: 0.4rem 0.5rem;\r\n        font-size: 12px;\r\n        font-family: \"Proxima Nova\";\r\n      }\r\n    }\r\n\r\n    .title {\r\n      margin-top: 1.5rem;\r\n      color: var(--violet);\r\n\r\n      span {\r\n        font-family: \"Bebas Neue Pro\";\r\n        font-style: normal;\r\n        font-weight: 700;\r\n        font-size: 23px;\r\n        line-height: 24px;\r\n      }\r\n    }\r\n  }\r\n  hr {\r\n    margin-top: 10px;\r\n    margin-bottom: 5px;\r\n  }\r\n`;\r\n","import { createContext } from \"react\";\r\n\r\nexport const SearchContext = createContext<any>(null);\r\n","import React, { useContext } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Skeleton from \"react-loading-skeleton\";\r\nimport { SearchContext } from \"../SearchContext\";\r\n// COMPONENTS\r\nimport SRPCard from \"../SRPCard\";\r\n// ICONS\r\nimport { BsBox } from \"react-icons/bs\";\r\nimport Breadcrumb from \"src/view/shared/Breadcrumb\";\r\nimport { i18n } from \"src/i18n\";\r\nimport { Tabs } from \"antd\";\r\nexport default function SRPTable({ currentPostsToShow }) {\r\n  // GLOBAL STATE\r\n  const { TabPane } = Tabs;\r\n\r\n  const { isLoading } = useContext(SearchContext);\r\n  const langue = localStorage.getItem(\"language\");\r\n  // HELPER FUNCTION\r\n  const getValidThumbnail = (attachmentsArray) => {\r\n    console.log(\"attachmentsArray\", attachmentsArray);\r\n    const acceptableExtions = \"png, jpg, jpeg, gif\";\r\n    let fakeUrl = \"https://via.placeholder.com/270x175\";\r\n    attachmentsArray.forEach((att) => {\r\n      if (att.downloadUrl)\r\n        if (att.downloadUrl.length >= 1) {\r\n          const urlExtension = att.downloadUrl.substring(\r\n            att.downloadUrl.lastIndexOf(\".\") + 1,\r\n            att.downloadUrl.length\r\n          );\r\n          if (acceptableExtions.includes(urlExtension)) {\r\n            fakeUrl = att.downloadUrl;\r\n          }\r\n        }\r\n    });\r\n    return fakeUrl;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <SRPDataLayout>\r\n        {\r\n          // ONCE LOADING IS DONE\r\n          isLoading === true ? (\r\n            <section>\r\n              <Skeleton height={170} />\r\n            </section>\r\n          ) : (\r\n            <section>\r\n              {currentPostsToShow.count > 0 ? (\r\n                <section>\r\n                  <Tabs\r\n                    className=\"links\"\r\n                    defaultActiveKey={\r\n                      currentPostsToShow.rows.rowsEvent.length > 0\r\n                        ? \"0\"\r\n                        : currentPostsToShow.rows.rowsPublication.length > 0\r\n                        ? \"1\"\r\n                        : currentPostsToShow.rows.rowsGlosaire.length > 0\r\n                        ? \"2\"\r\n                        : \"3\"\r\n                    }\r\n                    onChange={(key: string) => {}}\r\n                  >\r\n                    <TabPane\r\n                      className=\"\"\r\n                      tab={i18n(\"menu.Evènements\")}\r\n                      key=\"0\"\r\n                      disabled={currentPostsToShow.rows.rowsEvent.length <= 0}\r\n                    >\r\n                      <>\r\n                        {currentPostsToShow.rows.rowsEvent.map(\r\n                          (searchResult, index) => {\r\n                            let thumbnail: any;\r\n                            if (searchResult.supports.length >= 1) {\r\n                              thumbnail = getValidThumbnail(\r\n                                searchResult.supports\r\n                              );\r\n                            }\r\n                            if (langue === \"fr\") {\r\n                              return (\r\n                                <SRPCard\r\n                                  type={\r\n                                    searchResult[\"category\"]\r\n                                      ? searchResult[\"category\"][\"titleFR\"]\r\n                                      : null\r\n                                  }\r\n                                  title={searchResult[\"titleFR\"]}\r\n                                  entite={\"Evenements\"}\r\n                                  key={index}\r\n                                  _id={searchResult[\"_id\"] ?? 0}\r\n                                  date={searchResult[\"updatedAt\"]}\r\n                                  content={searchResult[\"descriptionFR\"]}\r\n                                  thumbnail={thumbnail}\r\n                                />\r\n                              );\r\n                            } else if (langue === \"ar\") {\r\n                              return (\r\n                                <SRPCard\r\n                                  type={\r\n                                    searchResult[\"category\"]\r\n                                      ? searchResult[\"category\"][\"titleAR\"]\r\n                                      : null\r\n                                  }\r\n                                  title={searchResult[\"titleAR\"]}\r\n                                  entite={\"Evenements\"}\r\n                                  key={index}\r\n                                  _id={searchResult[\"_id\"] ?? 0}\r\n                                  date={searchResult[\"updatedAt\"]}\r\n                                  content={searchResult[\"descriptionAR\"]}\r\n                                  thumbnail={thumbnail}\r\n                                />\r\n                              );\r\n                            } else if (langue === \"en\") {\r\n                              return (\r\n                                <SRPCard\r\n                                  type={\r\n                                    searchResult[\"category\"]\r\n                                      ? searchResult[\"category\"][\"titleEN\"]\r\n                                      : null\r\n                                  }\r\n                                  title={searchResult[\"titleEN\"]}\r\n                                  entite={\"Evenements\"}\r\n                                  key={index}\r\n                                  _id={searchResult[\"_id\"] ?? 0}\r\n                                  date={searchResult[\"updatedAt\"]}\r\n                                  content={searchResult[\"descriptionEN\"]}\r\n                                  thumbnail={thumbnail}\r\n                                />\r\n                              );\r\n                            }\r\n                          }\r\n                        )}\r\n                      </>\r\n                    </TabPane>\r\n                    <TabPane\r\n                      tab={i18n(\"menu.Publications\")}\r\n                      key=\"1\"\r\n                      disabled={\r\n                        currentPostsToShow.rows.rowsPublication.length <= 0\r\n                      }\r\n                    >\r\n                      <>\r\n                        {currentPostsToShow.rows.rowsPublication.map(\r\n                          (searchResult, index) => {\r\n                            let thumbnail: any;\r\n                            if (searchResult.photos.length >= 1) {\r\n                              console.log(\r\n                                \"searchResult.photos\",\r\n                                searchResult.photos\r\n                              );\r\n                              thumbnail = getValidThumbnail(\r\n                                searchResult.photos\r\n                              );\r\n                            }\r\n                            if (langue === \"fr\") {\r\n                              return (\r\n                                <SRPCard\r\n                                  type={\r\n                                    searchResult[\"category\"]\r\n                                      ? searchResult[\"category\"][\"titleFR\"]\r\n                                      : null\r\n                                  }\r\n                                  title={searchResult[\"titleFR\"]}\r\n                                  entite={\"detail\"}\r\n                                  key={index}\r\n                                  _id={searchResult[\"_id\"] ?? 0}\r\n                                  date={searchResult[\"updatedAt\"]}\r\n                                  content={searchResult[\"descriptionFR\"]}\r\n                                  thumbnail={thumbnail}\r\n                                />\r\n                              );\r\n                            } else if (langue === \"ar\") {\r\n                              return (\r\n                                <SRPCard\r\n                                  type={\r\n                                    searchResult[\"category\"]\r\n                                      ? searchResult[\"category\"][\"titleAR\"]\r\n                                      : null\r\n                                  }\r\n                                  title={searchResult[\"titleAR\"]}\r\n                                  entite={\"detail\"}\r\n                                  key={index}\r\n                                  _id={searchResult[\"_id\"] ?? 0}\r\n                                  date={searchResult[\"updatedAt\"]}\r\n                                  content={searchResult[\"descriptionAR\"]}\r\n                                  thumbnail={thumbnail}\r\n                                />\r\n                              );\r\n                            } else if (langue === \"en\") {\r\n                              return (\r\n                                <SRPCard\r\n                                  type={\r\n                                    searchResult[\"category\"]\r\n                                      ? searchResult[\"category\"][\"titleEN\"]\r\n                                      : null\r\n                                  }\r\n                                  title={searchResult[\"titleEN\"]}\r\n                                  entite={\"detail\"}\r\n                                  key={index}\r\n                                  _id={searchResult[\"_id\"] ?? 0}\r\n                                  date={searchResult[\"updatedAt\"]}\r\n                                  content={searchResult[\"descriptionEN\"]}\r\n                                  thumbnail={thumbnail}\r\n                                />\r\n                              );\r\n                            }\r\n                          }\r\n                        )}\r\n                      </>\r\n                    </TabPane>\r\n                    <TabPane\r\n                      tab={i18n(\"menu.Glossaire\")}\r\n                      key=\"2\"\r\n                      disabled={\r\n                        currentPostsToShow.rows.rowsGlosaire.length <= 0\r\n                      }\r\n                    >\r\n                      <>\r\n                        {currentPostsToShow.rows.rowsGlosaire.map(\r\n                          (searchResult, index) => {\r\n                            if (langue === \"fr\") {\r\n                              return (\r\n                                <SRPCard\r\n                                  type={\r\n                                    searchResult[\"categorie\"]\r\n                                      ? searchResult[\"categorie\"][\"titleFR\"]\r\n                                      : null\r\n                                  }\r\n                                  title={searchResult[\"nomFR\"]}\r\n                                  entite={\"Glossaire\"}\r\n                                  key={index}\r\n                                  _id={searchResult[\"_id\"] ?? 0}\r\n                                  date={searchResult[\"updatedAt\"]}\r\n                                  content={searchResult[\"definitionFR\"]}\r\n                                  thumbnail={\"\"}\r\n                                />\r\n                              );\r\n                            } else if (langue === \"ar\") {\r\n                              return (\r\n                                <SRPCard\r\n                                  type={\r\n                                    searchResult[\"categorie\"]\r\n                                      ? searchResult[\"categorie\"][\"titleAR\"]\r\n                                      : null\r\n                                  }\r\n                                  title={searchResult[\"nomAR\"]}\r\n                                  entite={\"Glossaire\"}\r\n                                  key={index}\r\n                                  _id={searchResult[\"_id\"] ?? 0}\r\n                                  date={searchResult[\"updatedAt\"]}\r\n                                  content={searchResult[\"definitionAR\"]}\r\n                                  thumbnail={\"\"}\r\n                                />\r\n                              );\r\n                            } else if (langue === \"en\") {\r\n                              return (\r\n                                <SRPCard\r\n                                  type={\r\n                                    searchResult[\"categorie\"]\r\n                                      ? searchResult[\"categorie\"][\"titleEN\"]\r\n                                      : null\r\n                                  }\r\n                                  title={searchResult[\"nomEN\"]}\r\n                                  entite={\"Glossaire\"}\r\n                                  key={index}\r\n                                  _id={searchResult[\"_id\"] ?? 0}\r\n                                  date={searchResult[\"updatedAt\"]}\r\n                                  content={searchResult[\"definitionEN\"]}\r\n                                  thumbnail={\"\"}\r\n                                />\r\n                              );\r\n                            }\r\n                          }\r\n                        )}\r\n                      </>\r\n                    </TabPane>\r\n                    <TabPane\r\n                      tab={i18n(\"menu.Médiathèque\")}\r\n                      key=\"3\"\r\n                      disabled={\r\n                        currentPostsToShow.rows.rowsMediatheque.length <= 0\r\n                      }\r\n                    >\r\n                      <>\r\n                        {currentPostsToShow.rows.rowsMediatheque.map(\r\n                          (searchResult, index) => {\r\n                            let thumbnail: any;\r\n                            if (searchResult.photos.length >= 1) {\r\n                              thumbnail = getValidThumbnail(\r\n                                searchResult.photos\r\n                              );\r\n                            }\r\n\r\n                            if (langue === \"fr\") {\r\n                              return (\r\n                                <SRPCard\r\n                                  type={searchResult[\"type\"]}\r\n                                  title={searchResult[\"titleFR\"]}\r\n                                  entite={\"Mediatheque/entity\"}\r\n                                  key={index}\r\n                                  _id={searchResult[\"_id\"] ?? 0}\r\n                                  date={searchResult[\"updatedAt\"]}\r\n                                  content={searchResult[\"descriptionFR\"]}\r\n                                  thumbnail={thumbnail}\r\n                                />\r\n                              );\r\n                            } else if (langue === \"ar\") {\r\n                              return (\r\n                                <SRPCard\r\n                                  type={searchResult[\"type\"]}\r\n                                  title={searchResult[\"titleAR\"]}\r\n                                  entite={\"Mediatheque/entity\"}\r\n                                  key={index}\r\n                                  _id={searchResult[\"_id\"] ?? 0}\r\n                                  date={searchResult[\"updatedAt\"]}\r\n                                  content={searchResult[\"descriptionAR\"]}\r\n                                  thumbnail={thumbnail}\r\n                                />\r\n                              );\r\n                            } else if (langue === \"en\") {\r\n                              return (\r\n                                <SRPCard\r\n                                  type={searchResult[\"type\"]}\r\n                                  title={searchResult[\"titleEN\"]}\r\n                                  entite={\"Mediatheque/entity\"}\r\n                                  key={index}\r\n                                  _id={searchResult[\"_id\"] ?? 0}\r\n                                  date={searchResult[\"updatedAt\"]}\r\n                                  content={searchResult[\"descriptionEN\"]}\r\n                                  thumbnail={thumbnail}\r\n                                />\r\n                              );\r\n                            }\r\n                          }\r\n                        )}\r\n                      </>\r\n                    </TabPane>\r\n                  </Tabs>\r\n                </section>\r\n              ) : (\r\n                <h3 id=\"noDataFound\">\r\n                  <BsBox />\r\n                  &nbsp;{i18n(\"common.noData\")}\r\n                </h3>\r\n              )}\r\n            </section>\r\n          )\r\n        }\r\n      </SRPDataLayout>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst SRPDataLayout = styled.div`\r\n  width: 100%;\r\n  margin: 1rem 0;\r\n\r\n  #noDataFound {\r\n    font-family: \"Proxima Nova\";\r\n    font-style: normal;\r\n    font-weight: 100;\r\n    font-size: 1.5rem;\r\n    text-align: center;\r\n    color: #c7c6c6;\r\n\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n`;\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport SearchService from \"src/modules/Search/SearchService\";\r\nimport { SearchContext } from \"../SearchContext\";\r\n\r\n// COMPONENTS\r\nimport SRPTable from \"./SRPTable\";\r\nimport SRPFooter from \"./SRPFooter\";\r\nimport \"react-loading-skeleton/dist/skeleton.css\";\r\nimport { i18n } from \"src/i18n\";\r\nimport Breadcrumb from \"src/view/shared/Breadcrumb\";\r\n\r\nexport default function SearchResults({ location }) {\r\n\t// GLOBAL STATE\r\n\tconst { setIsLoading, SRP, setSRP, searchString, setcurrentPageIndex } =\r\n\t\tuseContext(SearchContext);\r\n\r\n\tconst searchPublications = (SEARCH_STRING: string) => {\r\n\t\tsetIsLoading(true);\r\n\t\tSearchService.getSearchResultsForPublicationsBasedOnSearchString(\r\n\t\t\tSEARCH_STRING,\r\n\t\t\t0,\r\n\t\t).then((res) => {\r\n\t\t\tsetcurrentPageIndex(0);\r\n\t\t\tsetSRP(res);\r\n\t\t\tsetIsLoading(false);\r\n\t\t});\r\n\t};\r\n\t// HANDLING SUB FILTER (date / name)\r\n\t// const handleSubFilter = (event) => {\r\n\t//   setIsLoading(true);\r\n\t//   setSRP([]);\r\n\t//   const FILTER_STRING = `&orderBy=[${event.target.value}]`;\r\n\t//   // redo the search using chosen option\r\n\t//   SearchService.getSearchResultsForPublicationsBasedOnSearchString(\r\n\t//     searchString,\r\n\t//     0\r\n\t//   )\r\n\t//     .then((res) => {\r\n\t//       setSRP((SRP) => SRP.concat(res));\r\n\t//       setIsLoading(false);\r\n\t//     })\r\n\t//     .catch((err) => {\r\n\t//       console.error(err);\r\n\t//     });\r\n\t// };\r\n\tuseEffect(() => {\r\n\t\tsearchPublications(location.HOME_SEARCH_STRING);\r\n\t}, []);\r\n\tlet currentPostsToShow: any[] = [];\r\n\tif (SRP.length >= 1)\r\n\t\tif (SRP[0].rows.length >= 1) currentPostsToShow = SRP[0].rows;\r\n\r\n\treturn (\r\n\t\t<SRPLayout>\r\n\t\t\t{/* SUB FILTER AND SRP METADA */}\r\n\t\t\t{/* <SRPHeader>\r\n        {SRP.length >= 1 && (\r\n          <>\r\n            <div>\r\n              <strong>{SRP[0].count}</strong>\r\n              <span>résultat pour cette recherche</span>\r\n            </div>\r\n            <div id='filterContainer'>\r\n              <span>Trier par</span>\r\n              <select\r\n                name='filterBy'\r\n                id='filterBySelect'\r\n                onChange={handleSubFilter}>\r\n                <option value=''>--</option>\r\n                <option value='createdAt_DESC'>Date ( Desc )</option>\r\n                <option value='createdAt_ASC'>Date ( Asc )</option>\r\n                <option value='az'>Name A-Z</option>\r\n                <option value='za'>Name Z-A</option>\r\n              </select>\r\n            </div>\r\n          </>\r\n        )}\r\n      </SRPHeader> */}\r\n\r\n\t\t\t{/* RESULT CONTENT DISPLAYED IN ARRAY FORMAT */}\r\n\t\t\t<SRPTable currentPostsToShow={SRP} />\r\n\r\n\t\t\t{/* FOOTER WITH PAGINATION ENABLED */}\r\n\t\t\t{/* <SRPFooter totalPosts={SRP.length >= 1 ? SRP[0].count : 0} /> */}\r\n\t\t</SRPLayout>\r\n\t);\r\n}\r\n\r\nconst SRPLayout = styled.div`\r\n\tmargin-top: 1rem;\r\n`;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { SearchContext } from \"./SearchContext\";\r\nimport styled from \"styled-components\";\r\n\r\n// COMPONENTS\r\n\r\nimport SearchResults from \"./SRP/SearchResults\";\r\n// OTHER\r\n\r\nexport default function Search({ location }) {\r\n\t// GLOBAL STATE\r\n\tconst [isLoading, setIsLoading] = useState(false);\r\n\tconst [searchString, setSearchString] = useState(location.HOME_SEARCH_STRING);\r\n\tconst [SRP, setSRP] = useState([]);\r\n\tconst [publicationFilter, setpublicationFilter] = useState(\"autre\");\r\n\t// PAGINATION LOGIC\r\n\tconsole.log(\"first \", location);\r\n\tconst [currentPageIndex, setcurrentPageIndex] = useState(0);\r\n\tconst [numberOfPostsPerPage, setnumberOfPostsPerPage] = useState(5);\r\n\r\n\treturn (\r\n\t\t<SearchContext.Provider\r\n\t\t\tvalue={{\r\n\t\t\t\tisLoading,\r\n\t\t\t\tsetIsLoading,\r\n\t\t\t\tSRP,\r\n\t\t\t\tsetSRP,\r\n\t\t\t\tsearchString,\r\n\t\t\t\tsetSearchString,\r\n\t\t\t\tpublicationFilter,\r\n\t\t\t\tsetpublicationFilter,\r\n\t\t\t\tcurrentPageIndex,\r\n\t\t\t\tsetcurrentPageIndex,\r\n\t\t\t\tnumberOfPostsPerPage,\r\n\t\t\t\tsetnumberOfPostsPerPage,\r\n\t\t\t}}>\r\n\t\t\t<SearchLayout>\r\n\t\t\t\t<section className=\"wideContent\">\r\n\t\t\t\t\t<SearchResults location={location} />\r\n\t\t\t\t</section>\r\n\t\t\t</SearchLayout>\r\n\t\t</SearchContext.Provider>\r\n\t);\r\n}\r\n\r\nconst SearchLayout = styled.section`\r\n\tmax-width: 1170px;\r\n\tmargin: auto;\r\n\r\n\t@media (max-width: 1071px) {\r\n\t\tmargin: 150px 0 0 0;\r\n\t}\r\n\t.wideContent {\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: flex-start;\r\n\t}\r\n`;\r\n"],"names":["SearchService","tenantId","AuthCurrentTenant","authAxios","response","data","SEARCH_STRING","OFFSET","categoryName","publicationsOfSelectedCategory","rows","publications","finalResponseOBject","count","length","FILTER_STRING","FILTER","statut","thematique","category","SRPCard","_id","date","content","thumbnail","title","entite","type","formattedDate","moment","format","CardLayout","to","className","style","width","height","src","alt","noData","calendar","srcSet","parse","substring","styled","SearchContext","createContext","SRPTable","currentPostsToShow","TabPane","Tabs","isLoading","useContext","langue","localStorage","getItem","getValidThumbnail","attachmentsArray","console","log","fakeUrl","forEach","att","downloadUrl","urlExtension","lastIndexOf","includes","SRPDataLayout","defaultActiveKey","rowsEvent","rowsPublication","rowsGlosaire","onChange","key","tab","i18n","disabled","map","searchResult","index","supports","photos","rowsMediatheque","id","SearchResults","location","setIsLoading","SRP","setSRP","setcurrentPageIndex","searchString","useEffect","HOME_SEARCH_STRING","then","res","SRPLayout","Search","useState","setSearchString","publicationFilter","setpublicationFilter","currentPageIndex","numberOfPostsPerPage","setnumberOfPostsPerPage","Provider","value","SearchLayout"],"sourceRoot":""}