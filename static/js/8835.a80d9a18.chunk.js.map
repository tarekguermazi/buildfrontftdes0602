{"version":3,"file":"static/js/8835.a80d9a18.chunk.js","mappings":"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","sources":["../../src/yup.ts","../node_modules/react-hook-form/src/utils/isHTMLElement.ts","../node_modules/react-hook-form/src/constants.ts","../node_modules/react-hook-form/src/utils/isNullOrUndefined.ts","../node_modules/react-hook-form/src/utils/isObject.ts","../node_modules/react-hook-form/src/utils/isKey.ts","../node_modules/react-hook-form/src/utils/compact.ts","../node_modules/react-hook-form/src/utils/stringToPath.ts","../node_modules/react-hook-form/src/utils/set.ts","../node_modules/react-hook-form/src/logic/transformToNestObject.ts","../node_modules/react-hook-form/src/utils/isUndefined.ts","../node_modules/react-hook-form/src/utils/get.ts","../node_modules/react-hook-form/src/logic/focusOnErrorField.ts","../node_modules/react-hook-form/src/logic/removeAllEventListeners.ts","../node_modules/react-hook-form/src/logic/getRadioValue.ts","../node_modules/react-hook-form/src/logic/getMultipleSelectValue.ts","../node_modules/react-hook-form/src/utils/isRadioInput.ts","../node_modules/react-hook-form/src/utils/isFileInput.ts","../node_modules/react-hook-form/src/utils/isCheckBoxInput.ts","../node_modules/react-hook-form/src/utils/isMultipleSelect.ts","../node_modules/react-hook-form/src/logic/getCheckboxValue.ts","../node_modules/react-hook-form/src/logic/getFieldValue.ts","../node_modules/react-hook-form/src/utils/isDetached.ts","../node_modules/react-hook-form/src/utils/isEmptyObject.ts","../node_modules/react-hook-form/src/utils/isBoolean.ts","../node_modules/react-hook-form/src/utils/unset.ts","../node_modules/react-hook-form/src/logic/findRemovedFieldAndRemoveListener.ts","../node_modules/react-hook-form/src/utils/isPrimitive.ts","../node_modules/react-hook-form/src/utils/deepMerge.ts","../node_modules/react-hook-form/src/logic/setFieldArrayDirtyFields.ts","../node_modules/react-hook-form/src/utils/isString.ts","../node_modules/react-hook-form/src/logic/getFieldsValues.ts","../node_modules/react-hook-form/src/utils/deepEqual.ts","../node_modules/react-hook-form/src/logic/isErrorStateChanged.ts","../node_modules/react-hook-form/src/utils/isRegex.ts","../node_modules/react-hook-form/src/logic/getValueAndMessage.ts","../node_modules/react-hook-form/src/utils/isFunction.ts","../node_modules/react-hook-form/src/utils/isMessage.ts","../node_modules/react-hook-form/src/logic/getValidateError.ts","../node_modules/react-hook-form/src/logic/appendErrors.ts","../node_modules/react-hook-form/src/logic/validateField.ts","../node_modules/react-hook-form/src/utils/getPath.ts","../node_modules/react-hook-form/src/logic/assignWatchFields.ts","../node_modules/react-hook-form/src/logic/skipValidation.ts","../node_modules/react-hook-form/src/logic/getNodeParentName.ts","../node_modules/react-hook-form/src/logic/isNameInFieldArray.ts","../node_modules/react-hook-form/src/utils/isSelectInput.ts","../node_modules/react-hook-form/src/utils/isWeb.ts","../node_modules/react-hook-form/src/utils/cloneObject.ts","../node_modules/react-hook-form/src/utils/validationModeChecker.ts","../node_modules/react-hook-form/src/utils/isRadioOrCheckbox.ts","../node_modules/react-hook-form/src/useForm.ts","../node_modules/react-hook-form/src/logic/attachEventListeners.ts","../node_modules/react-hook-form/src/utils/onDomRemove.ts","../node_modules/react-hook-form/src/useFormContext.tsx"],"sourcesContent":[null,"export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (value: string) => /^\\w*$/.test(value);\n","export default (value: any[]) => value.filter(Boolean);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(\n    input\n      .replace(/[\"|']/g, '')\n      .replace(/\\[/g, '.')\n      .replace(/\\]/g, '')\n      .split('.'),\n  );\n","import isObject from './isObject';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types';\n\nexport default (data: FieldValues, value: Record<string, any> = {}): any => {\n  for (const key in data) {\n    !isKey(key) ? set(value, key, data[key]) : (value[key] = data[key]);\n  }\n  return value;\n};\n","export default (val: unknown): val is undefined => val === undefined;\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport compact from './compact';\n\nexport default (obj: any = {}, path: string, defaultValue?: unknown) => {\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport { FieldErrors, FieldRefs } from '../types';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus && isUndefined(field.ref.focus())) {\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import { RadioOrCheckboxOption } from '../types';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: '',\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport get from '../utils/get';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  shallowFieldsStateRef?: React.MutableRefObject<Partial<FieldValues>>,\n  excludeDisabled?: boolean,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value, disabled },\n      ref,\n      valueAsNumber,\n      valueAsDate,\n      setValueAs,\n    } = field;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return valueAsNumber\n      ? +value\n      : valueAsDate\n      ? (ref as HTMLInputElement).valueAsDate\n      : setValueAs\n      ? setValueAs(value)\n      : value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n","import { Ref } from '../types';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport set from '../utils/set';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport unset from '../utils/unset';\nimport compact from '../utils/compact';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  shallowFieldsStateRef: React.MutableRefObject<FieldValues>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name },\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n\n    !isUndefined(value) && set(shallowFieldsStateRef.current, name, value);\n  }\n\n  if (!ref.type || !fieldRef) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if (isRadioInput(ref) || isCheckBoxInput(ref)) {\n    if (Array.isArray(fieldRef.options) && fieldRef.options.length) {\n      compact(fieldRef.options).forEach((option = {}, index): void => {\n        if (\n          (isDetached(option.ref) && isSameRef(option, option.ref)) ||\n          forceDelete\n        ) {\n          removeAllEventListeners(option.ref, handleChange);\n          unset(fieldRef.options, `[${index}]`);\n        }\n      });\n\n      if (fieldRef.options && !compact(fieldRef.options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    delete fieldsRef.current[name];\n  }\n}\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport set from '../utils/set';\nimport { deepMerge } from '../utils/deepMerge';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        get(defaultValues[index] || {}, key) === values[index][key]\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields),\n    setDirtyFields(defaultValues, values, dirtyFields),\n  );\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  shallowFieldsState: Record<string, any>,\n  shouldUnregister: boolean,\n  excludeDisabled?: boolean,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : Array.isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n        undefined,\n        excludeDisabled,\n      );\n    }\n  }\n\n  return shouldUnregister\n    ? transformToNestObject(output)\n    : deepMerge(shallowFieldsState, transformToNestObject(output));\n};\n","import * as React from 'react';\nimport isObject from '../utils/isObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    object1 instanceof Date ||\n    object2 instanceof Date\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport deepEqual from '../utils/deepEqual';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldError,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FieldError | undefined;\n  name: InternalFieldName<TFieldValues>;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean => {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n\n  return (\n    (isValid && !!previousError) ||\n    (!isValid && !deepEqual(previousError, error, true)) ||\n    (isValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  );\n};\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule } from '../types';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import * as React from 'react';\nimport isString from '../utils/isString';\nimport { Message } from '../types';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  InternalFieldErrors,\n} from '../types';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  InternalFieldErrors,\n} from '../types';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  shallowFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<InternalFieldErrors<TFieldValues>> => {\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: InternalFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: isRadioOrCheckbox\n          ? (((fieldsRef.current[name] as Field).options || [])[0] || {}).ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if ((!isNullOrUndefined(min) || !isNullOrUndefined(max)) && value !== '') {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(value)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      value.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      value.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && pattern && !isEmpty) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(fieldsRef, name, shallowFieldsStateRef);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\nimport { FieldName } from '../types';\n\nexport const getPath = <TFieldValues>(\n  rootPath: FieldName<TFieldValues>,\n  values: any,\n  paths: FieldName<TFieldValues>[] = [],\n): FieldName<TFieldValues>[] => {\n  for (const property in values) {\n    const rootName = (rootPath +\n      (isObject(values)\n        ? `.${property}`\n        : `[${property}]`)) as FieldName<TFieldValues>;\n\n    isPrimitive(values[property])\n      ? paths.push(rootName)\n      : getPath(rootName, values[property], paths);\n  }\n\n  return paths;\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport {\n  DeepPartial,\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value = undefined;\n\n  watchFields.add(fieldName);\n\n  if (!isEmptyObject(fieldValues)) {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || Array.isArray(value)) {\n      getPath(fieldName, value).forEach((name) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import { FieldValues, InternalFieldName } from '../types';\n\nexport const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}([|.)\\\\d+`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (\n  names: Set<InternalFieldName<FieldValues>>,\n  name: InternalFieldName<FieldValues>,\n) => [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import { UNDEFINED } from '../constants';\n\nexport default typeof window !== UNDEFINED && typeof document !== UNDEFINED;\n","import isPrimitive from './isPrimitive';\nimport isHTMLElement from './isHTMLElement';\nimport isWeb from './isWeb';\n\nexport default function cloneObject<T extends unknown>(data: T): T {\n  let copy: any;\n\n  if (\n    isPrimitive(data) ||\n    (isWeb && (data instanceof File || isHTMLElement(data)))\n  ) {\n    return data;\n  }\n\n  if (data instanceof Date) {\n    copy = new Date(data.getTime());\n    return copy;\n  }\n\n  if (data instanceof Set) {\n    copy = new Set();\n    for (const item of data) {\n      copy.add(item);\n    }\n    return copy;\n  }\n\n  if (data instanceof Map) {\n    copy = new Map();\n    for (const key of data.keys()) {\n      copy.set(key, cloneObject(data.get(key)));\n    }\n    return copy;\n  }\n\n  copy = Array.isArray(data) ? [] : {};\n\n  for (const key in data) {\n    copy[key] = cloneObject(data[key]);\n  }\n\n  return copy;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport isErrorStateChanged from './logic/isErrorStateChanged';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getNodeParentName from './logic/getNodeParentName';\nimport deepEqual from './utils/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport isKey from './utils/isKey';\nimport cloneObject from './utils/cloneObject';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport compact from './utils/compact';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isWeb from './utils/isWeb';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  RegisterOptions,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNamesMarkedBoolean,\n  LiteralToPrimitive,\n  DeepPartial,\n  InternalNameSet,\n  DefaultValues,\n  FieldError,\n  SetFieldValue,\n  FieldArrayDefaultValues,\n  ResetFieldArrayFunctionRef,\n  UseWatchRenderFunctions,\n  RecordInternalNameSet,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const fieldArrayValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const watchFieldsRef = React.useRef<InternalNameSet<TFieldValues>>(new Set());\n  const useWatchFieldsRef = React.useRef<RecordInternalNameSet<TFieldValues>>(\n    {},\n  );\n  const useWatchRenderFunctionsRef = React.useRef<UseWatchRenderFunctions>({});\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const shallowFieldsStateRef = React.useRef({});\n  const resetFieldArrayFunctionRef = React.useRef<\n    ResetFieldArrayFunctionRef<TFieldValues>\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet<TFieldValues>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const { isOnSubmit, isOnTouch } = modeRef.current;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isValidating: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnChange: isReValidateOnChange,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n  shallowFieldsStateRef.current = shouldUnregister\n    ? {}\n    : isEmptyObject(shallowFieldsStateRef.current)\n    ? cloneObject(defaultValues)\n    : shallowFieldsStateRef.current;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) => {\n      if (!isUnMount.current) {\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...state,\n        };\n        setFormState(formStateRef.current);\n      }\n    },\n    [],\n  );\n\n  const updateIsValidating = () =>\n    readFormStateRef.current.isValidating &&\n    updateFormState({\n      isValidating: true,\n    });\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FieldError | undefined,\n      shouldRender: boolean | null = false,\n      state: {\n        dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        isErrorStateChanged<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state) ||\n        readFormStateRef.current.isValidating\n      ) {\n        updateFormState({\n          ...state,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n          isValidating: false,\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (name: FieldName<TFieldValues>, rawValue: SetFieldValue<TFieldValues>) => {\n      const { ref, options } = fieldsRef.current[name] as Field;\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref)) {\n        (options || []).forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string[]).includes(\n              selectRef.value,\n            )),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = Array.isArray(value)\n                  ? !!(value as []).find(\n                      (data: string) => data === checkboxRef.value,\n                    )\n                  : value === checkboxRef.value),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const isFormDirty = React.useCallback(\n    (name?: string, data?: unknown[]): boolean => {\n      if (readFormStateRef.current.isDirty) {\n        const formValues = getValues();\n\n        name && data && set(formValues, name, data);\n\n        return !deepEqual(formValues, defaultValuesRef.current);\n      }\n\n      return false;\n    },\n    [],\n  );\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touched'>\n    > => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty = !deepEqual(\n          get(defaultValuesRef.current, name),\n          getFieldValue(fieldsRef, name, shallowFieldsStateRef),\n        );\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        const state = {\n          isDirty: isFormDirty(),\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        isChanged && shouldRender && updateFormState(state);\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!fieldsRef.current[name]) {\n          console.warn('📋 Field is missing with `name` attribute: ', name);\n          return false;\n        }\n      }\n\n      const error = (\n        await validateField<TFieldValues>(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          fieldsRef.current[name] as Field,\n          shallowFieldsStateRef,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(name, error, skipReRender);\n\n      return isUndefined(error);\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues(),\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (Array.isArray(names)) {\n        const isInputsValid = names\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formStateRef.current.errors, name, error)\n              : unset(formStateRef.current.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isEmptyObject(errors),\n          isValidating: false,\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, names);\n\n        shouldRenderBaseOnError(\n          names,\n          error,\n          previousFormIsValid !== isEmptyObject(errors),\n          {},\n          isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      updateIsValidating();\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (Array.isArray(fields)) {\n        !name && (formStateRef.current.errors = {});\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, null)),\n        );\n        updateFormState({\n          isValidating: false,\n        });\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      const data = {};\n      set(data, name, value);\n\n      for (const fieldName of getPath(name, value)) {\n        if (fieldsRef.current[fieldName]) {\n          setFieldValue(fieldName, get(data, fieldName));\n          shouldDirty && updateAndGetDirtyState(fieldName);\n          shouldValidate && trigger(fieldName as FieldName<TFieldValues>);\n        }\n      }\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      config: SetValueConfig,\n    ) => {\n      !shouldUnregister &&\n        !isPrimitive(value) &&\n        set(shallowFieldsStateRef.current, name, { ...value });\n\n      if (fieldsRef.current[name]) {\n        setFieldValue(name, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n        config.shouldValidate && trigger(name as any);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n\n        if (fieldArrayNamesRef.current.has(name)) {\n          const parentName = getNodeParentName(name) || name;\n          set(fieldArrayDefaultValuesRef.current, name, value);\n\n          resetFieldArrayFunctionRef.current[parentName]({\n            [parentName]: get(fieldArrayDefaultValuesRef.current, parentName),\n          } as UnpackNestedValue<DeepPartial<TFieldValues>>);\n\n          if (\n            (readFormStateRef.current.isDirty ||\n              readFormStateRef.current.dirtyFields) &&\n            config.shouldDirty\n          ) {\n            set(\n              formStateRef.current.dirtyFields,\n              name,\n              setFieldArrayDirtyFields(\n                value,\n                get(defaultValuesRef.current, name, []),\n                get(formStateRef.current.dirtyFields, name, []),\n              ),\n            );\n\n            updateFormState({\n              isDirty: !deepEqual(\n                { ...getValues(), [name]: value },\n                defaultValuesRef.current,\n              ),\n            });\n          }\n        }\n      }\n\n      !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = <T extends FieldName<TFieldValues>>(name: T) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = <T extends FieldName<FieldValues>>(\n    name: T,\n  ): boolean => {\n    let found = true;\n\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (const key in useWatchFieldsRef.current) {\n        if (\n          !name ||\n          !useWatchFieldsRef.current[key].size ||\n          useWatchFieldsRef.current[key].has(name) ||\n          useWatchFieldsRef.current[key].has(getNodeParentName(name))\n        ) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue(\n    name: FieldName<TFieldValues>,\n    value: SetFieldValue<TFieldValues>,\n    config?: SetValueConfig,\n  ): void {\n    setInternalValue(name, value, config || {});\n    isFieldWatched(name) && updateFormState();\n    renderWatchedInputs(name);\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        let name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender =\n            !isEmptyObject(state) ||\n            (!isBlurEvent && isFieldWatched(name as FieldName<TFieldValues>));\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (!shouldUnregister && isCheckBoxInput(target as Ref)) {\n            set(\n              shallowFieldsStateRef.current,\n              name,\n              getFieldValue(fieldsRef, name),\n            );\n          }\n\n          if (shouldSkipValidation) {\n            !isBlurEvent && renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          updateIsValidating();\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues(),\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n            error = get(errors, name);\n\n            if (\n              isCheckBoxInput(target as Ref) &&\n              !error &&\n              resolverRef.current\n            ) {\n              const parentNodeName = getNodeParentName(name);\n              const currentError = get(errors, parentNodeName, {});\n              currentError.type &&\n                currentError.message &&\n                (error = currentError);\n\n              if (\n                parentNodeName &&\n                (currentError ||\n                  get(formStateRef.current.errors, parentNodeName))\n              ) {\n                name = parentNodeName;\n              }\n            }\n\n            isValid = isEmptyObject(errors);\n\n            previousFormIsValid !== isValid && (shouldRender = true);\n          } else {\n            error = (\n              await validateField<TFieldValues>(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              )\n            )[name];\n          }\n\n          !isBlurEvent && renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function setFieldArrayDefaultValues<T extends FieldValues>(data: T): T {\n    if (!shouldUnregister) {\n      let copy = cloneObject(data);\n\n      for (const value of fieldArrayNamesRef.current) {\n        if (isKey(value) && !copy[value]) {\n          copy = {\n            ...copy,\n            [value]: [],\n          };\n        }\n      }\n\n      return copy;\n    }\n    return data;\n  }\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (Array.isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return setFieldArrayDefaultValues(\n      getFieldsValues(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current),\n        shouldUnregister,\n      ),\n    );\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const { errors } = await resolverRef.current!(\n        {\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const isValid = isEmptyObject(errors);\n\n      formStateRef.current.isValid !== isValid &&\n        updateFormState({\n          isValid,\n        });\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) =>\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        shallowFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      ),\n    [shouldUnregister],\n  );\n\n  const updateWatchedValue = React.useCallback((name: string) => {\n    if (isWatchAllRef.current) {\n      updateFormState();\n    } else {\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          updateFormState();\n          break;\n        }\n      }\n\n      renderWatchedInputs(name);\n    }\n  }, []);\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field?: Field, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister && !compact(field.options || []).length) {\n          unset(validFieldsRef.current, field.ref.name);\n          unset(fieldsWithValidationRef.current, field.ref.name);\n          unset(formStateRef.current.errors, field.ref.name);\n          set(formStateRef.current.dirtyFields, field.ref.name, true);\n\n          updateFormState({\n            isDirty: isFormDirty(),\n          });\n\n          readFormStateRef.current.isValid &&\n            resolverRef.current &&\n            validateResolver();\n          updateWatchedValue(field.ref.name);\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (Array.isArray(name) ? name : [name]).forEach((inputName) =>\n        fieldsRef.current[inputName] && isKey(inputName)\n          ? delete formStateRef.current.errors[inputName]\n          : unset(formStateRef.current.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption) {\n    const ref = (fieldsRef.current[name] || {})!.ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    updateFormState({\n      isValid: false,\n    });\n\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  const watchInternal = React.useCallback(\n    <T>(fieldNames?: string | string[], defaultValue?: T, watchId?: string) => {\n      const watchFields = watchId\n        ? useWatchFieldsRef.current[watchId]\n        : watchFieldsRef.current;\n      let fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current),\n        shouldUnregister,\n        false,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        if (fieldArrayNamesRef.current.has(fieldNames)) {\n          const fieldArrayValue = get(\n            fieldArrayValuesRef.current,\n            fieldNames,\n            [],\n          );\n          fieldValues =\n            !fieldArrayValue.length ||\n            fieldArrayValue.length !==\n              compact(get(fieldValues, fieldNames, [])).length\n              ? fieldArrayValuesRef.current\n              : fieldValues;\n        }\n\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(get(defaultValuesRef.current, fieldNames))\n            ? defaultValue\n            : get(defaultValuesRef.current, fieldNames),\n          true,\n        );\n      }\n\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n\n      if (Array.isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      isWatchAllRef.current = isUndefined(watchId);\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    for (const fieldName of Array.isArray(name) ? name : [name]) {\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n    }\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    options: RegisterOptions | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\"',\n          ref,\n          'https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...options,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? Array.isArray(field.options) &&\n          compact(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...options,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...compact((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...options,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(shallowFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : shallowFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name as FieldName<TFieldValues>, defaultValue);\n      }\n    }\n\n    if (!isEmptyObject(options)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          shallowFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          previousFormIsValid !== isEmptyObject(error) && updateFormState();\n        });\n      }\n    }\n\n    if (!(isFieldArray && isEmptyDefaultValue)) {\n      !isFieldArray && unset(formStateRef.current.dirtyFields, name);\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    options?: RegisterOptions,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrRegisterOptions?:\n      | FieldName<TFieldValues>\n      | RegisterOptions\n      | (TFieldElement & Ref)\n      | null,\n    options?: RegisterOptions,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrRegisterOptions)) {\n        registerFieldRef({ name: refOrRegisterOptions }, options);\n      } else if (\n        isObject(refOrRegisterOptions) &&\n        'name' in refOrRegisterOptions\n      ) {\n        registerFieldRef(refOrRegisterOptions, options);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrRegisterOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues = setFieldArrayDefaultValues(\n        getFieldsValues(\n          fieldsRef,\n          cloneObject(shallowFieldsStateRef.current),\n          shouldUnregister,\n          true,\n        ),\n      );\n\n      readFormStateRef.current.isSubmitting &&\n        updateFormState({\n          isSubmitting: true,\n        });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formStateRef.current.errors = fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const { name } = field.ref;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formStateRef.current.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formStateRef.current.errors).every(\n            (name) => name in fieldsRef.current,\n          )\n        ) {\n          updateFormState({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          formStateRef.current.errors = {\n            ...formStateRef.current.errors,\n            ...fieldErrors,\n          };\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusOnErrorField(fieldsRef.current, formStateRef.current.errors);\n        }\n      } finally {\n        formStateRef.current.isSubmitting = false;\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: isValid ? formStateRef.current.isValid : false,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const reset = (\n    values?: DefaultValues<TFieldValues>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && Array.isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n    defaultValuesRef.current = { ...(values || defaultValuesRef.current) };\n    values && renderWatchedInputs('');\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    shallowFieldsStateRef.current = shouldUnregister\n      ? {}\n      : cloneObject(values || defaultValuesRef.current);\n\n    resetRefs(omitResetState);\n  };\n\n  React.useEffect(() => {\n    resolver && readFormStateRef.current.isValid && validateResolver();\n    observerRef.current =\n      observerRef.current || !isWeb\n        ? observerRef.current\n        : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n  }, [removeFieldEventListenerAndRef, defaultValuesRef.current]);\n\n  React.useEffect(\n    () => () => {\n      observerRef.current && observerRef.current.disconnect();\n      isUnMount.current = true;\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      Object.values(fieldsRef.current).forEach((field) =>\n        removeFieldEventListenerAndRef(field, true),\n      );\n    },\n    [],\n  );\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n    formState: isProxyEnabled\n      ? new Proxy(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (process.env.NODE_ENV !== 'production') {\n              if (prop === 'isValid' && isOnSubmit) {\n                console.warn(\n                  '📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n                );\n              }\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n  };\n\n  const control = React.useMemo(\n    () => ({\n      isFormDirty,\n      updateWatchedValue,\n      shouldUnregister,\n      updateFormState,\n      removeFieldEventListener,\n      watchInternal,\n      mode: modeRef.current,\n      reValidateMode: {\n        isReValidateOnBlur,\n        isReValidateOnChange,\n      },\n      validateResolver: resolver ? validateResolver : undefined,\n      fieldsRef,\n      resetFieldArrayFunctionRef,\n      useWatchFieldsRef,\n      useWatchRenderFunctionsRef,\n      fieldArrayDefaultValuesRef,\n      validFieldsRef,\n      fieldsWithValidationRef,\n      fieldArrayNamesRef,\n      readFormStateRef,\n      formStateRef,\n      defaultValuesRef,\n      shallowFieldsStateRef,\n      fieldArrayValuesRef,\n      ...commonProps,\n    }),\n    [\n      defaultValuesRef.current,\n      updateWatchedValue,\n      shouldUnregister,\n      removeFieldEventListener,\n      watchInternal,\n    ],\n  );\n\n  return {\n    watch,\n    control,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent?: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","import * as React from 'react';\nimport { Field, FieldRefs } from '../types';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove<TFieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  removeFieldEventListenerAndRef: (\n    field: Field | undefined,\n    forceDelete?: boolean,\n  ) => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const option of field.options) {\n          if (option && option.ref && isDetached(option.ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues, FormProviderProps } from './types';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n"],"names":["parseErrorSchema","error","validateAllFieldCriteria","Array","isArray","inner","length","reduce","previous","path","message","type","previousTypes","types","key","Object","concat","yupResolver","schema","options","abortEarly","values","context","validate","errors","parsedErrors","transformToNestObject","value","HTMLElement","EVENTS","BLUR","CHANGE","INPUT","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","SELECT","UNDEFINED","INPUT_VALIDATION_RULES","max","min","maxLength","minLength","pattern","required","isObjectType","isNullOrUndefined","Date","test","filter","Boolean","input","compact","replace","split","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isObject","isNaN","data","val","undefined","obj","defaultValue","result","isUndefined","fields","fieldErrors","get","field","ref","focus","validateWithStateUpdate","isHTMLElement","removeEventListener","defaultReturn","isValid","option","checked","selected","map","element","defaultResult","validResult","attributes","getFieldValue","fieldsRef","name","shallowFieldsStateRef","excludeDisabled","current","disabled","valueAsNumber","valueAsDate","setValueAs","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","getMultipleSelectValue","isCheckBox","getCheckboxValue","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","keys","unset","previousObjRef","updatePath","childObject","slice","baseGet","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isBoolean","isSameRef","fieldValue","deepMerge","target","source","isPrimitive","targetValue","sourceValue","setDirtyFields","defaultValues","dirtyFields","parentName","shallowFieldsState","shouldUnregister","search","output","isString","startsWith","find","deepEqual","object1","object2","isErrorObject","React.isValidElement","keys1","keys2","val1","val2","isErrorStateChanged","validFields","fieldsWithValidation","previousError","RegExp","validationData","isRegex","getValidateError","isMessage","isRadio","isCheckBoxInput","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","getFieldsValue","validateRef","isFunction","validateError","validationResult","entries","validateFunction","validateResult","validateField","getPath","rootPath","paths","property","rootName","push","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","forEach","skipValidation","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","substring","indexOf","isMatchFieldArrayName","searchName","names","some","window","document","cloneObject","copy","isWeb","File","getTime","Set","Map","mode","isOnSubmit","isWindowUndefined","isProxyEnabled","Proxy","useForm","reValidateMode","resolver","shouldFocusError","criteriaMode","React.useRef","fieldArrayDefaultValuesRef","fieldArrayValuesRef","watchFieldsRef","useWatchFieldsRef","useWatchRenderFunctionsRef","fieldsWithValidationRef","validFieldsRef","defaultValuesRef","isUnMount","isWatchAllRef","handleChangeRef","resetFieldArrayFunctionRef","contextRef","resolverRef","fieldArrayNamesRef","modeRef","modeChecker","isValidateAllFieldCriteria","React.useState","isDirty","isValidating","submitCount","touched","isSubmitting","isSubmitSuccessful","formState","setFormState","readFormStateRef","formStateRef","observerRef","updateFormState","React.useCallback","state","updateIsValidating","shouldRenderBaseOnError","shouldRender","shouldReRender","setFieldValue","rawValue","radioRef","selectRef","includes","checkboxRef","isFormDirty","formValues","getValues","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","trigger","Promise","setInternalValues","shouldDirty","shouldValidate","setInternalValue","config","has","getNodeParentName","setFieldArrayDirtyFields","isFieldWatched","match","renderWatchedInputs","found","size","setFieldArrayDefaultValues","payload","getFieldsValues","shouldSkipValidation","parentNodeName","currentError","validateResolver","removeFieldEventListener","forceDelete","handleChange","fieldRef","removeAllEventListeners","findRemovedFieldAndRemoveListener","updateWatchedValue","removeFieldEventListenerAndRef","watchInternal","fieldNames","watchId","fieldArrayValue","assignWatchFields","combinedDefaultValues","registerFieldRef","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isFieldArray","isNameInFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","shouldAttachChangeEvent","addEventListener","attachEventListeners","isSelectInput","handleSubmit","onValid","onInvalid","e","preventDefault","persist","fieldError","focusOnErrorField","resetRefs","React.useEffect","observer","MutationObserver","observe","childList","subtree","onDomRemove","disconnect","commonProps","setValue","register","refOrRegisterOptions","unregister","prop","control","React.useMemo","watch","reset","omitResetState","inputRef","closest","resetFieldArray","clearErrors","inputName","setError","shouldFocus","FormContext","React.createContext","displayName","useFormContext","React.useContext","FormProvider","_a","children","props","React.createElement","Provider"],"sourceRoot":""}